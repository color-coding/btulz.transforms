package ${GroupId}.${ArtifactId}.${Domain.getName().toLowerCase()}.bo.${MasterBO.getName().toLowerCase()};

import java.math.*;
import javax.xml.bind.annotation.*;

import org.colorcoding.ibas.bobas.core.*;
import org.colorcoding.ibas.bobas.mapping.*;
import org.colorcoding.ibas.bobas.bo.*;
import org.colorcoding.ibas.bobas.data.*;
import ${GroupId}.${ArtifactId}.${Domain.getName().toLowerCase()}.MyConfiguration;

/**
* ${Model.getDescription()}
* 
*/
@XmlAccessorType(XmlAccessType.NONE)
@XmlType(name = ${Model.getName()}.BUSINESS_OBJECT_NAME, namespace = MyConfiguration.NAMESPACE_BO)
$BEGIN_MODEL_MODELTYPE_IS_DOCUMENT$
@XmlRootElement(name = ${Model.getName()}.BUSINESS_OBJECT_NAME, namespace = MyConfiguration.NAMESPACE_BO)
@BOCode(${Model.getName()}.BUSINESS_OBJECT_CODE)
$END_MODEL_MODELTYPE_IS_DOCUMENT$
$BEGIN_MODEL_MODELTYPE_IS_MASTERDATA$
@XmlRootElement(name = ${Model.getName()}.BUSINESS_OBJECT_NAME, namespace = MyConfiguration.NAMESPACE_BO)
@BOCode(${Model.getName()}.BUSINESS_OBJECT_CODE)
$END_MODEL_MODELTYPE_IS_MASTERDATA$
$BEGIN_MODEL_MODELTYPE_IS_SIMPLE$
@XmlRootElement(name = ${Model.getName()}.BUSINESS_OBJECT_NAME, namespace = MyConfiguration.NAMESPACE_BO)
@BOCode(${Model.getName()}.BUSINESS_OBJECT_CODE)
$END_MODEL_MODELTYPE_IS_SIMPLE$
public class ${Model.getName()} extends BusinessObject<${Model.getName()}> implements I${Model.getName()} {

    /**
     * 序列化版本标记
     */
    private static final long serialVersionUID = ${ID.newLong()}L;

    /**
    * 当前类型
    */
    private static final Class<?> MY_CLASS = ${Model.getName()}.class;

    /**
    * 数据库表
    */
    public static final String DB_TABLE_NAME = "${Model.getMapped()}";

    /**
    * 业务对象编码
    */
    public static final String BUSINESS_OBJECT_CODE = "${MasterBO.getShortName()}";

    /**
    * 业务对象名称
    */
    public static final String BUSINESS_OBJECT_NAME = "${Model.getName()}";

$BEGIN_MODEL_PROPERTY$
    /**
    * 属性名称-${Property.getDescription()}
    */
    private static final String PROPERTY_${Property.getName().toUpperCase()}_NAME = "${Property.getName()}";

    /**
    * ${Property.getDescription()} 属性
    */
    @DbField(name = "${Property.getMapped()}", type = DbFieldType.${Property.getAnnotatedType()}, table = DB_TABLE_NAME, primaryKey = ${Property.isPrimaryKey()})
    public static final IPropertyInfo<${Property.getDeclaredType()}> PROPERTY_${Property.getName().toUpperCase()} = registerProperty(PROPERTY_${Property.getName().toUpperCase()}_NAME, ${Property.getDeclaredType()}.class, MY_CLASS);

    /**
    * 获取-${Property.getDescription()}
    * 
    * @return 值
    */
    @XmlElement(name = PROPERTY_${Property.getName().toUpperCase()}_NAME)
    public final ${Property.getDeclaredType()} get${Property.getName()}() {
        return this.getProperty(PROPERTY_${Property.getName().toUpperCase()});
    }

    /**
    * 设置-${Property.getDescription()}
    * 
    * @param value 值
    */
    public final void set${Property.getName()}(${Property.getDeclaredType()} value) {
        this.setProperty(PROPERTY_${Property.getName().toUpperCase()}, value);
    }

$BEGIN_PROPERTY_DECLAREDTYPE_IS_BIGDECIMAL$
    /**
    * 设置-${Property.getDescription()}
    * 
    * @param value 值
    */
    public final void set${Property.getName()}(String value) {
        this.set${Property.getName()}(Decimal.valueOf(value));
    }

    /**
    * 设置-${Property.getDescription()}
    * 
    * @param value 值
    */
    public final void set${Property.getName()}(int value) {
        this.set${Property.getName()}(Decimal.valueOf(value));
    }

    /**
    * 设置-${Property.getDescription()}
    * 
    * @param value 值
    */
    public final void set${Property.getName()}(double value) {
        this.set${Property.getName()}(Decimal.valueOf(value));
    }
$END_PROPERTY_DECLAREDTYPE_IS_BIGDECIMAL$

$END_MODEL_PROPERTY$

$BEGIN_BOITEM$
$BEGIN_BOITEM_RELATION_IS_ONETOMANY$
    /**
    * 属性名称-${BOItem.getDescription()}
    */
    private static final String PROPERTY_${BOItem.getName().toUpperCase()}S_NAME = "${BOItem.getName()}s";

    /**
    * ${BOItem.getDescription()}的集合属性
    * 
    */ 
    public static final IPropertyInfo<I${BOItem.getName()}s> PROPERTY_${BOItem.getName().toUpperCase()}S = registerProperty(PROPERTY_${BOItem.getName().toUpperCase()}S_NAME, I${BOItem.getName()}s.class, MY_CLASS);
    /**
    * 获取-${BOItem.getDescription()}集合
    * 
    * @return 值
    */
    @XmlElementWrapper(name = PROPERTY_${BOItem.getName().toUpperCase()}S_NAME)
    @XmlElement(name = ${BOItem.getName()}.BUSINESS_OBJECT_NAME, type = ${BOItem.getName()}.class)
    public final I${BOItem.getName()}s get${BOItem.getName()}s() {
        return this.getProperty(PROPERTY_${BOItem.getName().toUpperCase()}S);
    }

    /**
    * 设置-${BOItem.getDescription()}集合
    * 
    * @param value 值
    */
    public final void set${BOItem.getName()}s(I${BOItem.getName()}s value) {
        this.setProperty(PROPERTY_${BOItem.getName().toUpperCase()}S, value);
    }

$END_BOITEM_RELATION_IS_ONETOMANY$

$BEGIN_BOITEM_RELATION_IS_ONETOONE$
    /**
    * 属性名称-${BOItem.getDescription()}
    */
    private static final String PROPERTY_${BOItem.getName().toUpperCase()}_NAME = "${BOItem.getName()}";

    /**
    * ${BOItem.getDescription()}属性
    * 
    */ 
    public static final IPropertyInfo<I${BOItem.getName()}> PROPERTY_${BOItem.getName().toUpperCase()} = registerProperty(PROPERTY_${BOItem.getName().toUpperCase()}_NAME, I${BOItem.getName()}.class, MY_CLASS);
    /**
    * 获取-${BOItem.getDescription()}
    * 
    * @return 值
    */
    @XmlElement(name = PROPERTY_${BOItem.getName().toUpperCase()}_NAME}, type = ${BOItem.getName()}.class)
    public final I${BOItem.getName()} get${BOItem.getName()}() {
        return this.getProperty(PROPERTY_${BOItem.getName().toUpperCase()});
    }

    /**
    * 设置-${BOItem.getDescription()}
    * 
    * @param value 值
    */
    public final void set${BOItem.getName()}(I${BOItem.getName()} value) {
        this.setProperty(PROPERTY_${BOItem.getName().toUpperCase()}, value);
    }
$END_BOITEM_RELATION_IS_ONETOONE$
$END_BOITEM$

    /**
    * 初始化数据
    */
    @Override
    protected void initialize() {
        super.initialize();// 基类初始化，不可去除
$BEGIN_BOITEM$
$BEGIN_BOITEM_RELATION_IS_ONETOMANY$
        this.set${BOItem.getName()}s(new ${BOItem.getName()}s(this));
$END_BOITEM_RELATION_IS_ONETOMANY$
$BEGIN_BOITEM_RELATION_IS_ONETOONE$
        this.set${BOItem.getName()}(new ${BOItem.getName()}());
$END_BOITEM_RELATION_IS_ONETOONE$
$END_BOITEM$
        this.setObjectCode(BUSINESS_OBJECT_CODE);
$BEGIN_MODEL_MODELTYPE_IS_DOCUMENT$
        this.setPostingDate(DateTime.getToday());
        this.setDocumentDate(DateTime.getToday());
        this.setDeliveryDate(DateTime.getToday());
        this.setDocumentStatus(emDocumentStatus.RELEASED);
$END_MODEL_MODELTYPE_IS_DOCUMENT$
$BEGIN_MODEL_MODELTYPE_IS_MASTERDATA$
        this.setActivated(emYesNo.YES);
$END_MODEL_MODELTYPE_IS_MASTERDATA$

    }

}