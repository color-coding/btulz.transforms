/**
 * @license
 * Copyright ${Copyright}. All Rights Reserved.
 */
namespace ${Domain.getName().toLowerCase()} {
    export namespace bo {
$BEGIN_BO_MODEL$
        /** ${Model.getDescription()} */
        export class ${Model.getName()} extends ibas.${Model.output(ts.class)}<${Model.getName()}> implements I${Model.getName()} {
            /** 业务对象编码 */
            static BUSINESS_OBJECT_CODE: string = BO_CODE_${BO.getName().toUpperCase()};
            /** 构造函数 */
            constructor() {
                super();
            }
$BEGIN_MODEL_PROPERTY$
            /** 映射的属性名称-${Property.getDescription()} */
            static PROPERTY_${Property.getName().toUpperCase()}_NAME: string = "${Property.getName()}";
            /** 获取-${Property.getDescription()} */
            get ${Property.getName(LowerCamelCase)}(): ${Property.output(ts.type)} {
                return this.getProperty<${Property.output(ts.type)}>(${BO.getName()}.PROPERTY_${Property.getName().toUpperCase()}_NAME);
            }
            /** 设置-${Property.getDescription()} */
            set ${Property.getName(LowerCamelCase)}(value: ${Property.output(ts.type)}) {
                this.setProperty(${BO.getName()}.PROPERTY_${Property.getName().toUpperCase()}_NAME, value);
            }

$END_MODEL_PROPERTY$

$BEGIN_BOITEM$
$BEGIN_BOITEM_RELATION_IS_ONETOMANY$
            /** 映射的属性名称-${BOItem.getDescription()}集合 */
            static PROPERTY_${BOItem.getName().toUpperCase()}S_NAME: string = "${BOItem.getName()}s";
            /** 获取-${BOItem.getDescription()}集合 */
            get ${BOItem.getName(LowerCamelCase)}s(): ${BOItem.getName()}s {
                return this.getProperty<${BOItem.getName()}s>(${BO.getName()}.PROPERTY_${BOItem.getName().toUpperCase()}S_NAME);
            }
            /** 设置-${BOItem.getDescription()}集合 */
            set ${BOItem.getName(LowerCamelCase)}s(value: ${BOItem.getName()}s) {
                this.setProperty(${BO.getName()}.PROPERTY_${BOItem.getName().toUpperCase()}S_NAME, value);
            }
$END_BOITEM_RELATION_IS_ONETOMANY$
$BEGIN_BOITEM_RELATION_IS_ONETOONE$
            /** 映射的属性名称-${BOItem.getDescription()}集合 */
            static PROPERTY_${BOItem.getName().toUpperCase()}_NAME: string = "${BOItem.getName()}";
            /** 获取-${BOItem.getDescription()}集合 */
            get ${BOItem.getName(LowerCamelCase)}(): ${BOItem.getName()} {
                return this.getProperty<${BOItem.getName()}>(${BO.getName()}.PROPERTY_${BOItem.getName().toUpperCase()}_NAME);
            }
            /** 设置-${BOItem.getDescription()}集合 */
            set ${BOItem.getName(LowerCamelCase)}(value: ${BOItem.getName()}) {
                this.setProperty(${BO.getName()}.PROPERTY_${BOItem.getName().toUpperCase()}_NAME, value);
            }
$END_BOITEM_RELATION_IS_ONETOONE$
$END_BOITEM$

            /** 初始化数据 */
            protected init(): void {
$BEGIN_BOITEM$
$BEGIN_BOITEM_RELATION_IS_ONETOMANY$
                this.${BOItem.getName(LowerCamelCase)}s = new ${BOItem.getName()}s(this);
$END_BOITEM_RELATION_IS_ONETOMANY$
$BEGIN_BOITEM_RELATION_IS_ONETOONE$
                this.${BOItem.getName(LowerCamelCase)} = new ${BOItem.getName()}();
$END_BOITEM_RELATION_IS_ONETOONE$
$END_BOITEM$
                this.objectCode = ${BO.getName()}.BUSINESS_OBJECT_CODE;
            }
        }
$END_BO_MODEL$

$BEGIN_BOITEM$
$BEGIN_BOITEM_RELATION_IS_ONETOMANY$
        /** ${BOItem.getDescription()} 集合 */
        export class ${BOItem.getName()}s extends ibas.BusinessObjects<${BOItem.getName()}, ${BOItem.getParent().getName()}> implements I${BOItem.getName()}s {
            /** 创建并添加子项 */
            create(): ${BOItem.getName()} {
                let item: ${BOItem.getName()} = new ${BOItem.getName()}();
                this.add(item);
                return item;
            }
        }
$END_BOITEM_RELATION_IS_ONETOMANY$
$END_BOITEM$

$BEGIN_BOITEMS$
$BEGIN_BO_MODEL$
        /** ${Model.getDescription()} */
        export class ${Model.getName()} extends ibas.BO${Model.getModelType()}<${Model.getName()}> implements I${Model.getName()} {
            /** 构造函数 */
            constructor() {
                super();
            }
$BEGIN_MODEL_PROPERTY$
            /** 映射的属性名称-${Property.getDescription()} */
            static PROPERTY_${Property.getName().toUpperCase()}_NAME: string = "${Property.getName()}";
            /** 获取-${Property.getDescription()} */
            get ${Property.getName(LowerCamelCase)}(): ${Property.output(ts.type)} {
                return this.getProperty<${Property.output(ts.type)}>(${BO.getName()}.PROPERTY_${Property.getName().toUpperCase()}_NAME);
            }
            /** 设置-${Property.getDescription()} */
            set ${Property.getName(LowerCamelCase)}(value: ${Property.output(ts.type)}) {
                this.setProperty(${BO.getName()}.PROPERTY_${Property.getName().toUpperCase()}_NAME, value);
            }

$END_MODEL_PROPERTY$

$BEGIN_BOITEM$
$BEGIN_BOITEM_RELATION_IS_ONETOMANY$
            /** 映射的属性名称-${BOItem.getDescription()}集合 */
            static PROPERTY_${BOItem.getName().toUpperCase()}S_NAME: string = "${BOItem.getName()}s";
            /** 获取-${BOItem.getDescription()}集合 */
            get ${BOItem.getName(LowerCamelCase)}s(): ${BOItem.getName()}s {
                return this.getProperty<${BOItem.getName()}s>(${BO.getName()}.PROPERTY_${BOItem.getName().toUpperCase()}S_NAME);
            }
            /** 设置-${BOItem.getDescription()}集合 */
            set ${BOItem.getName(LowerCamelCase)}s(value: ${BOItem.getName()}s) {
                this.setProperty(${BO.getName()}.PROPERTY_${BOItem.getName().toUpperCase()}S_NAME, value);
            }

$END_BOITEM_RELATION_IS_ONETOMANY$
$BEGIN_BOITEM_RELATION_IS_ONETOONE$
            /** 映射的属性名称-${BOItem.getDescription()}集合 */
            static PROPERTY_${BOItem.getName().toUpperCase()}_NAME: string = "${BOItem.getName()}";
            /** 获取-${BOItem.getDescription()}集合 */
            get ${BOItem.getName(LowerCamelCase)}(): ${BOItem.getName()} {
                return this.getProperty<${BOItem.getName()}>(${BO.getName()}.PROPERTY_${BOItem.getName().toUpperCase()}_NAME);
            }
            /** 设置-${BOItem.getDescription()}集合 */
            set ${BOItem.getName(LowerCamelCase)}(value: ${BOItem.getName()}) {
                this.setProperty(${BO.getName()}.PROPERTY_${BOItem.getName().toUpperCase()}_NAME, value);
            }

$END_BOITEM_RELATION_IS_ONETOONE$
$END_BOITEM$
            /** 初始化数据 */
            protected init(): void {
$BEGIN_BOITEM$
$BEGIN_BOITEM_RELATION_IS_ONETOMANY$
                this.${BOItem.getName(LowerCamelCase)}s = new ${BOItem.getName()}s(this);
$END_BOITEM_RELATION_IS_ONETOMANY$
$BEGIN_BOITEM_RELATION_IS_ONETOONE$
                this.${BOItem.getName(LowerCamelCase)} = new ${BOItem.getName()}();
$END_BOITEM_RELATION_IS_ONETOONE$
$END_BOITEM$
            }
        }
$END_BO_MODEL$

$BEGIN_BOITEM$
$BEGIN_BOITEM_RELATION_IS_ONETOMANY$
        /** ${BOItem.getDescription()} 集合 */
        export class ${BOItem.getName()}s extends ibas.BusinessObjects<${BOItem.getName()}, ${BOItem.getParent().getName()}> implements I${BOItem.getName()}s {
            /** 创建并添加子项 */
            create(): ${BOItem.getName()} {
                let item: ${BOItem.getName()} = new ${BOItem.getName()}();
                this.add(item);
                return item;
            }
        }
$END_BOITEM_RELATION_IS_ONETOMANY$
$END_BOITEM$
$END_BOITEMS$
    }
}